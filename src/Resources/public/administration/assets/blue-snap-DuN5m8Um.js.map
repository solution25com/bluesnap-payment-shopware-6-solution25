{"version":3,"file":"blue-snap-DuN5m8Um.js","sources":["../../../app/administration/src/module/sw-order/view/sw-order-detail-general/sw-order-detail-general.html.twig","../../../app/administration/src/module/sw-order/view/sw-order-detail-general/index.js","../../../app/administration/src/component/bluesnap-api-test/bluesnap-api-test.html.twig","../../../app/administration/src/component/bluesnap-api-test/index.js","../../../app/administration/src/service/bluesnap-api-test.service.js","../../../app/administration/src/main.js"],"sourcesContent":["{% block sw_order_detail_general %}\n  <sw-card\n      title=\"Bluesnap Details\"\n      :isLoading=\"isLoading\"\n      position-identifier=\"bluesnap-details\"\n  >\n    <template #toolbar v-if=\"paymentMethod.includes('LinkPayment')\">\n      <div>\n        <p style=\"margin-bottom: 10px\"><strong>Re-send Payment Link</strong></p>\n        <sw-button\n            variant=\"primary\"\n            :isLoading=\"isSendingEmail\"\n            :disabled=\"disabledStatuses.some(s => paymentStatus.includes(s))\"\n            @click=\"onConfirmSendPaymentLink\"\n        >\n          Send Email\n        </sw-button>\n      </div>\n    </template>\n\n    <div>\n      <dl>\n        <dt><strong>Bluesnap Transaction ID</strong></dt>\n        <dd>{{ orderTransactionId }}</dd>\n      </dl>\n    </div>\n  </sw-card>\n\n  <sw-modal\n      v-if=\"showConfirmModal\"\n      title=\"Confirm Send Email\"\n      @modal-close=\"onCloseModal\"\n  >\n    <p>Are you sure you want to send the payment link by email?</p>\n\n    <template #modal-footer>\n      <sw-button @click=\"onCloseModal\" variant=\"secondary\">\n        Cancel\n      </sw-button>\n      <sw-button\n          variant=\"primary\"\n          :isLoading=\"isSendingEmail\"\n          @click=\"confirmSendPaymentLink\"\n      >\n        Send Email\n      </sw-button>\n    </template>\n  </sw-modal>\n\n  {% parent %}\n{% endblock %}","const {Criteria} = Shopware.Data;\nimport template from './sw-order-detail-general.html.twig';\n\nShopware.Component.override('sw-order-detail-general', {\n  template,\n  inject: ['repositoryFactory'],\n  mixins: ['notification'],\n\n  data() {\n    return {\n      orderTransactionId: 'Not found',\n      isLoading: true,\n      isSendingEmail: false,\n      transactionFound: false,\n      paymentMethod: '',\n      paymentStatus: '',\n      showConfirmModal: false,\n      disabledStatuses: [\n        'paid',\n        'refunded',\n        'partially_refunded',\n        'cancelled',\n        'in_progress',\n      ]\n    };\n  },\n\n  created() {\n    this.loadTransaction();\n    this.loadPaymentData();\n  },\n  methods: {\n    onConfirmSendPaymentLink() {\n      this.showConfirmModal = true;\n    },\n    onCloseModal() {\n      this.showConfirmModal = false;\n    },\n    confirmSendPaymentLink() {\n      this.showConfirmModal = false;\n      this.sendPaymentLinkEmail();\n    },\n    async sendPaymentLinkEmail() {\n      try {\n        this.isSendingEmail = true;\n        const response = await Shopware.Service('repositoryFactory').httpClient.post(\n          '/re-send-payment-link',\n          {\n            orderId: this.orderId,\n          },\n          {\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${Shopware.Context.api.authToken.access}`,\n            }\n          }\n        )\n        this.createNotificationSuccess({\n          title: 'Email Sent',\n          message: 'The payment link email was successfully sent to the customer.'\n        });\n      } catch (err) {\n        this.createNotificationError({\n          title: 'Error',\n          message: 'Failed to send payment link email.'\n        });\n      }\n      this.isSendingEmail = false;\n    },\n\n    loadPaymentData() {\n      if (!this.order || !this.order.transactions) {\n        return;\n      }\n      const transaction = this.order.transactions.last();\n      if (transaction && transaction.paymentMethod) {\n        this.paymentMethod = transaction.paymentMethod.handlerIdentifier;\n        this.paymentStatus = transaction.stateMachineState.technicalName;\n      }\n    },\n    loadTransaction() {\n\n      const orderId = this.$route.params.id || this.order?.id;\n\n      const repository = this.repositoryFactory.create('bluesnap_transaction');\n      const criteria = new Criteria();\n      criteria.addFilter(Criteria.equals('orderId', orderId));\n\n      repository.search(criteria, Shopware.Context.api)\n        .then((response) => {\n          if (response.total > 0) {\n            const transaction = response.first();\n            this.orderTransactionId = transaction.transactionId;\n            this.transactionFound = true;\n          }\n        })\n        .catch(() => {\n          this.orderTransactionId = 'Error';\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    }\n  }\n});\n","<div>\n    <sw-button-process\n            :is-loading=\"isLoading\"\n            :process-success=\"isSaveSuccessful\"\n            @process-finish=\"saveFinish\"\n            @click=\"check\"\n    >\n        Test API Connection\n    </sw-button-process>\n</div>","import template from './bluesnap-api-test.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('bluesnap-api-test', {\n    template,\n\n    props: ['label'],\n    inject: ['bluesnapApiTestService'],\n\n    mixins: [Mixin.getByName('notification')],\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n        };\n    },\n\n    computed: {\n        pluginConfig() {\n            let $parent = this.$parent;\n\n            while ($parent.actualConfigData === undefined) {\n                $parent = $parent.$parent;\n            }\n\n            return $parent.actualConfigData.null;\n        },\n    },\n\n    methods: {\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        getCurrentSalesChannelId() {\n            let $parent = this.$parent;\n\n            while ($parent.currentSalesChannelId === undefined) {\n                $parent = $parent.$parent;\n            }\n\n            return $parent.currentSalesChannelId;\n        },\n\n        check() {\n            this.isLoading = true;\n\n            const payload = {\n                ...this.pluginConfig,\n                salesChannelId: this.getCurrentSalesChannelId()\n            };\n\n            this.bluesnapApiTestService\n                .check(payload)\n\n                .then((response) => {\n                    if (response.success) {\n                        this.isSaveSuccessful = true;\n                        this.createNotificationSuccess({\n                            title: this.$tc('Bluesnap.apiTest.success.title'),\n                            message: this.$tc('Bluesnap.apiTest.success.message'),\n                        });\n                    } else {\n                        this.createNotificationError({\n                            title: this.$tc('Bluesnap.apiTest.error.title'),\n                            message: this.$tc('Bluesnap.apiTest.error.message'),\n                        });\n                    }\n                })\n                .catch((error) => {\n                    this.createNotificationError({\n                        title: 'BlueSnap API Test',\n                        message: error.response?.data?.errors?.[0]?.detail || error.message || 'Connection failed!',\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n    },\n});\n","const ApiService = Shopware.Classes.ApiService;\n\nexport default class BluesnapApiTestService extends ApiService {\n\n    constructor(httpClient, loginService, apiEndpoint = 'bluesnap-test-connection') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n    check(values) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(`_action/${this.getApiBasePath()}/test-connection`, values, {\n                headers,\n            })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}","import './module/sw-order/view/sw-order-detail-general';\nimport './component/bluesnap-api-test';\n\nimport BluesnapApiTestService from './service/bluesnap-api-test.service';\n\nShopware.Service().register('bluesnapApiTestService', () => {\n    return new BluesnapApiTestService(\n        Shopware.Application.getContainer('init').httpClient,\n        Shopware.Service('loginService')\n    );\n});"],"names":["template$1","Criteria","template","response","transaction","_a","orderId","repository","criteria","Component","Mixin","$parent","payload","error","_b","_c","_d","ApiService","BluesnapApiTestService","httpClient","loginService","apiEndpoint","values","headers"],"mappings":"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"}