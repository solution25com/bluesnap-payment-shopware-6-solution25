const l=`{% block sw_order_detail_general %} <sw-card title="Bluesnap Details" :isLoading="isLoading" position-identifier="bluesnap-details" > <template #toolbar v-if="paymentMethod.includes('LinkPayment')"> <div> <p style="margin-bottom: 10px"><strong>Re-send Payment Link</strong></p> <sw-button variant="primary" :isLoading="isSendingEmail" :disabled="disabledStatuses.some(s => paymentStatus.includes(s))" @click="onConfirmSendPaymentLink" > Send Email </sw-button> </div> </template> <div> <dl> <dt><strong>Bluesnap Transaction ID</strong></dt> <dd>{{ orderTransactionId }}</dd> </dl> </div> </sw-card> <sw-modal v-if="showConfirmModal" title="Confirm Send Email" @modal-close="onCloseModal" > <p>Are you sure you want to send the payment link by email?</p> <template #modal-footer> <sw-button @click="onCloseModal" variant="secondary"> Cancel </sw-button> <sw-button variant="primary" :isLoading="isSendingEmail" @click="confirmSendPaymentLink" > Send Email </sw-button> </template> </sw-modal> {% parent %} {% endblock %}`,{Criteria:o}=Shopware.Data;Shopware.Component.override("sw-order-detail-general",{template:l,inject:["repositoryFactory"],mixins:["notification"],data(){return{orderTransactionId:"Not found",isLoading:!0,isSendingEmail:!1,transactionFound:!1,paymentMethod:"",paymentStatus:"",showConfirmModal:!1,disabledStatuses:["paid","refunded","partially_refunded","cancelled","in_progress"]}},created(){this.loadTransaction(),this.loadPaymentData()},methods:{onConfirmSendPaymentLink(){this.showConfirmModal=!0},onCloseModal(){this.showConfirmModal=!1},confirmSendPaymentLink(){this.showConfirmModal=!1,this.sendPaymentLinkEmail()},async sendPaymentLinkEmail(){try{this.isSendingEmail=!0;const e=await Shopware.Service("repositoryFactory").httpClient.post("/re-send-payment-link",{orderId:this.orderId},{headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});this.createNotificationSuccess({title:"Email Sent",message:"The payment link email was successfully sent to the customer."})}catch{this.createNotificationError({title:"Error",message:"Failed to send payment link email."})}this.isSendingEmail=!1},loadPaymentData(){if(!this.order||!this.order.transactions)return;const e=this.order.transactions.last();e&&e.paymentMethod&&(this.paymentMethod=e.paymentMethod.handlerIdentifier,this.paymentStatus=e.stateMachineState.technicalName)},loadTransaction(){var a;const e=this.$route.params.id||((a=this.order)==null?void 0:a.id),t=this.repositoryFactory.create("solu1_bluesnap_transaction"),s=new o;s.addFilter(o.equals("orderId",e)),t.search(s,Shopware.Context.api).then(i=>{if(i.total>0){const n=i.first();this.orderTransactionId=n.transactionId,this.transactionFound=!0}}).catch(()=>{this.orderTransactionId="Error"}).finally(()=>{this.isLoading=!1})}}});const c='<div> <sw-button-process :is-loading="isLoading" :process-success="isSaveSuccessful" @process-finish="saveFinish" @click="check" > Test API Connection </sw-button-process> </div>',{Component:d,Mixin:p}=Shopware;d.register("bluesnap-api-test",{template:c,props:["label"],inject:["bluesnapApiTestService"],mixins:[p.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1}},computed:{pluginConfig(){let e=this.$parent;for(;e.actualConfigData===void 0;)e=e.$parent;return e.actualConfigData.null}},methods:{saveFinish(){this.isSaveSuccessful=!1},getCurrentSalesChannelId(){let e=this.$parent;for(;e.currentSalesChannelId===void 0;)e=e.$parent;return e.currentSalesChannelId},check(){this.isLoading=!0;const e={...this.pluginConfig,salesChannelId:this.getCurrentSalesChannelId()};this.bluesnapApiTestService.check(e).then(t=>{t.success?(this.isSaveSuccessful=!0,this.createNotificationSuccess({title:this.$tc("Bluesnap.apiTest.success.title"),message:this.$tc("Bluesnap.apiTest.success.message")})):this.createNotificationError({title:this.$tc("Bluesnap.apiTest.error.title"),message:this.$tc("Bluesnap.apiTest.error.message")})}).catch(t=>{var s,a,i,n;this.createNotificationError({title:"BlueSnap API Test",message:((n=(i=(a=(s=t.response)==null?void 0:s.data)==null?void 0:a.errors)==null?void 0:i[0])==null?void 0:n.detail)||t.message||"Connection failed!"})}).finally(()=>{this.isLoading=!1})}}});const r=Shopware.Classes.ApiService;class h extends r{constructor(t,s,a="bluesnap-test-connection"){super(t,s,a)}check(t){const s=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/test-connection`,t,{headers:s}).then(a=>r.handleResponse(a))}}Shopware.Service().register("bluesnapApiTestService",()=>new h(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService")));
//# sourceMappingURL=solu1-bluesnap-payment-Dze_u0rm.js.map
