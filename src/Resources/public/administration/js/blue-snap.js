(function(){"use strict";var n={};n.p="bundles/bluesnap/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/bluesnap/"),function(){let{Criteria:n}=Shopware.Data;Shopware.Component.override("sw-order-detail-general",{template:'{% block sw_order_detail_general %}\n  <sw-card\n      title="Bluesnap Details"\n      :isLoading="isLoading"\n      position-identifier="bluesnap-details"\n  >\n    <template #toolbar v-if="paymentMethod.includes(\'LinkPayment\')">\n      <div>\n        <p style="margin-bottom: 10px"><strong>Re-send Payment Link</strong></p>\n        <sw-button\n            variant="primary"\n            :isLoading="isSendingEmail"\n            :disabled="disabledStatuses.some(s => paymentStatus.includes(s))"\n            @click="onConfirmSendPaymentLink"\n        >\n          Send Email\n        </sw-button>\n      </div>\n    </template>\n\n    <div>\n      <dl>\n        <dt><strong>Bluesnap Transaction ID</strong></dt>\n        <dd>{{ orderTransactionId }}</dd>\n      </dl>\n    </div>\n  </sw-card>\n\n  <sw-modal\n      v-if="showConfirmModal"\n      title="Confirm Send Email"\n      @modal-close="onCloseModal"\n  >\n    <p>Are you sure you want to send the payment link by email?</p>\n\n    <template #modal-footer>\n      <sw-button @click="onCloseModal" variant="secondary">\n        Cancel\n      </sw-button>\n      <sw-button\n          variant="primary"\n          :isLoading="isSendingEmail"\n          @click="confirmSendPaymentLink"\n      >\n        Send Email\n      </sw-button>\n    </template>\n  </sw-modal>\n\n  {% parent %}\n{% endblock %}',inject:["repositoryFactory"],mixins:["notification"],data(){return{orderTransactionId:"Not found",isLoading:!0,isSendingEmail:!1,transactionFound:!1,paymentMethod:"",paymentStatus:"",showConfirmModal:!1,disabledStatuses:["paid","refunded","partially_refunded","cancelled","in_progress"]}},created(){this.loadTransaction(),this.loadPaymentData()},methods:{onConfirmSendPaymentLink(){this.showConfirmModal=!0},onCloseModal(){this.showConfirmModal=!1},confirmSendPaymentLink(){this.showConfirmModal=!1,this.sendPaymentLinkEmail()},async sendPaymentLinkEmail(){try{this.isSendingEmail=!0,await Shopware.Service("repositoryFactory").httpClient.post("/re-send-payment-link",{orderId:this.orderId},{headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}),this.createNotificationSuccess({title:"Email Sent",message:"The payment link email was successfully sent to the customer."})}catch(n){console.log(n),this.createNotificationError({title:"Error",message:"Failed to send payment link email."})}this.isSendingEmail=!1},loadPaymentData(){if(!this.order||!this.order.transactions)return;let n=this.order.transactions.last();n&&n.paymentMethod&&(this.paymentMethod=n.paymentMethod.handlerIdentifier,this.paymentStatus=n.stateMachineState.technicalName)},loadTransaction(){let t=this.$route.params.id||this.order?.id,e=this.repositoryFactory.create("bluesnap_transaction"),a=new n;a.addFilter(n.equals("orderId",t)),e.search(a,Shopware.Context.api).then(n=>{if(n.total>0){let t=n.first();this.orderTransactionId=t.transactionId,this.transactionFound=!0}}).catch(()=>{this.orderTransactionId="Error"}).finally(()=>{this.isLoading=!1})}}})}()})();