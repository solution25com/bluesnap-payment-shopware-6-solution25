!function(){"use strict";var e={};e.p="bundles/bluesnap/",window?.__sw__?.assetPath&&(e.p=window.__sw__.assetPath+"/bundles/bluesnap/"),function(){let{Criteria:e}=Shopware.Data;Shopware.Component.override("sw-order-detail-general",{template:'{% block sw_order_detail_general %}\n  <sw-card\n      title="Bluesnap Details"\n      :isLoading="isLoading"\n      position-identifier="bluesnap-details"\n  >\n    <template #toolbar v-if="paymentMethod.includes(\'LinkPayment\')">\n      <div>\n        <p style="margin-bottom: 10px"><strong>Re-send Payment Link</strong></p>\n        <sw-button\n            variant="primary"\n            :isLoading="isSendingEmail"\n            :disabled="disabledStatuses.some(s => paymentStatus.includes(s))"\n            @click="onConfirmSendPaymentLink"\n        >\n          Send Email\n        </sw-button>\n      </div>\n    </template>\n\n    <div>\n      <dl>\n        <dt><strong>Bluesnap Transaction ID</strong></dt>\n        <dd>{{ orderTransactionId }}</dd>\n      </dl>\n    </div>\n  </sw-card>\n\n  <sw-modal\n      v-if="showConfirmModal"\n      title="Confirm Send Email"\n      @modal-close="onCloseModal"\n  >\n    <p>Are you sure you want to send the payment link by email?</p>\n\n    <template #modal-footer>\n      <sw-button @click="onCloseModal" variant="secondary">\n        Cancel\n      </sw-button>\n      <sw-button\n          variant="primary"\n          :isLoading="isSendingEmail"\n          @click="confirmSendPaymentLink"\n      >\n        Send Email\n      </sw-button>\n    </template>\n  </sw-modal>\n\n  {% parent %}\n{% endblock %}',inject:["repositoryFactory"],mixins:["notification"],data(){return{orderTransactionId:"Not found",isLoading:!0,isSendingEmail:!1,transactionFound:!1,paymentMethod:"",paymentStatus:"",showConfirmModal:!1,disabledStatuses:["paid","refunded","partially_refunded","cancelled","in_progress"]}},created(){this.loadTransaction(),this.loadPaymentData()},methods:{onConfirmSendPaymentLink(){this.showConfirmModal=!0},onCloseModal(){this.showConfirmModal=!1},confirmSendPaymentLink(){this.showConfirmModal=!1,this.sendPaymentLinkEmail()},async sendPaymentLinkEmail(){try{this.isSendingEmail=!0,await Shopware.Service("repositoryFactory").httpClient.post("/re-send-payment-link",{orderId:this.orderId},{headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}),this.createNotificationSuccess({title:"Email Sent",message:"The payment link email was successfully sent to the customer."})}catch(e){this.createNotificationError({title:"Error",message:"Failed to send payment link email."})}this.isSendingEmail=!1},loadPaymentData(){if(!this.order||!this.order.transactions)return;let e=this.order.transactions.last();e&&e.paymentMethod&&(this.paymentMethod=e.paymentMethod.handlerIdentifier,this.paymentStatus=e.stateMachineState.technicalName)},loadTransaction(){let t=this.$route.params.id||this.order?.id,n=this.repositoryFactory.create("bluesnap_transaction"),i=new e;i.addFilter(e.equals("orderId",t)),n.search(i,Shopware.Context.api).then(e=>{if(e.total>0){let t=e.first();this.orderTransactionId=t.transactionId,this.transactionFound=!0}}).catch(()=>{this.orderTransactionId="Error"}).finally(()=>{this.isLoading=!1})}}});let{Component:t,Mixin:n}=Shopware;t.register("bluesnap-api-test",{template:'<div>\n    <sw-button-process\n            :is-loading="isLoading"\n            :process-success="isSaveSuccessful"\n            @process-finish="saveFinish"\n            @click="check"\n    >\n        Test API Connection\n    </sw-button-process>\n</div>',props:["label"],inject:["bluesnapApiTestService"],mixins:[n.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1}},computed:{pluginConfig(){let e=this.$parent;for(;void 0===e.actualConfigData;)e=e.$parent;return e.actualConfigData.null}},methods:{saveFinish(){this.isSaveSuccessful=!1},getCurrentSalesChannelId(){let e=this.$parent;for(;void 0===e.currentSalesChannelId;)e=e.$parent;return e.currentSalesChannelId},check(){this.isLoading=!0;let e={...this.pluginConfig,salesChannelId:this.getCurrentSalesChannelId()};this.bluesnapApiTestService.check(e).then(e=>{e.success?(this.isSaveSuccessful=!0,this.createNotificationSuccess({title:this.$tc("Bluesnap.apiTest.success.title"),message:this.$tc("Bluesnap.apiTest.success.message")})):this.createNotificationError({title:this.$tc("Bluesnap.apiTest.error.title"),message:this.$tc("Bluesnap.apiTest.error.message")})}).catch(e=>{this.createNotificationError({title:"BlueSnap API Test",message:e.response?.data?.errors?.[0]?.detail||e.message||"Connection failed!"})}).finally(()=>{this.isLoading=!1})}}});let i=Shopware.Classes.ApiService;class a extends i{constructor(e,t,n="bluesnap-test-connection"){super(e,t,n)}check(e){let t=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/test-connection`,e,{headers:t}).then(e=>i.handleResponse(e))}}Shopware.Service().register("bluesnapApiTestService",()=>new a(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService")))}()}();